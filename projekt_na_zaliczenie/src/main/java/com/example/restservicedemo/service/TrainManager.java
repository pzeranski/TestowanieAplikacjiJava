package com.example.restservicedemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import com.example.restservicedemo.domain.Train;
import com.example.restservicedemo.domain.TDriver;

public class TrainManager {

    private Connection connection;

    private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
	private static final String CREATE_TABLE_TDRIVER = "CREATE TABLE IF NOT EXISTS TDriver(td_id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY(start with 1), name varchar(20), start_work integer)";
    private static final String CREATE_TABLE_TRAIN = "CREATE TABLE IF NOT EXISTS Train(t_id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY(start with 1), number varchar(20), yop integer, driver_id bigint FOREIGN KEY references TDriver(td_id))";

    private PreparedStatement addTrainStmt;
    private PreparedStatement changeTrainStmt;
    private PreparedStatement getTrainWithOwnerStmt;
    private PreparedStatement getAllTrainsStmt;
    private PreparedStatement getTrainByIdStmt;
    private PreparedStatement removeTrainStmt;
    private PreparedStatement deleteAllTrainsStmt;

    private PreparedStatement dropTable;
    private Statement statement;

    public TrainManager() {
        try {
            connection = DriverManager.getConnection(URL);
            statement = connection.createStatement();

			statement.executeUpdate(CREATE_TABLE_TDRIVER);
			statement.executeUpdate(CREATE_TABLE_TRAIN);

            addTrainStmt = connection.prepareStatement(
                    "INSERT INTO Train (number, yop) VALUES (?, ?)");
            changeTrainStmt = connection.prepareStatement(
                    "UPDATE Train SET driver_id = ? WHERE t_id = ?");
            deleteAllTrainsStmt = connection.prepareStatement(
                    "DELETE FROM Train");
            removeTrainStmt = connection.prepareStatement(
                    "DELETE FROM Train where t_id = ?");
            getTrainWithOwnerStmt = connection.prepareStatement(
            		"SELECT td_id, name, start_work, t_id, number, yop, driver_id FROM TDriver JOIN Train ON driver_id=td_id WHERE t_id=?");
            getTrainByIdStmt = connection.prepareStatement(
                    "SELECT * FROM Train where t_id = ?");
            getAllTrainsStmt = connection.prepareStatement(
                    "SELECT * FROM Train");
            dropTable = connection.prepareStatement(
                    "DROP TABLE Train"
            );

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    Connection getConnection() {
        return connection;
    }

    public void clearTrains() {
        try {
            deleteAllTrainsStmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public int addTrain(Train train) {
        int count = 0;
        try {
            addTrainStmt.setString(1, train.getNumber());
            addTrainStmt.setInt(2, train.getYop());

            count = addTrainStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    public void dropTable() throws SQLException {
        try {
            connection = DriverManager.getConnection(URL);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;

            rs = connection.getMetaData().getTables(null, null, null, null);
            tableExists = false;
            while (rs.next()) {
                if ("Train".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }
            if (tableExists)
                dropTable.executeQuery();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public List<Train> getAllTrains() {

        List<Train> trains = new ArrayList<Train>();
        TDriverManager tdm = new TDriverManager();

        try {
            ResultSet rs = getAllTrainsStmt.executeQuery();

            while (rs.next()) {
                Train t = new Train();
                TDriver td = tdm.getTDriver(rs.getInt("driver_id"));
                t.setId(rs.getInt("t_id"));
                t.setNumber(rs.getString("number"));
                t.setYop(rs.getInt("yop"));
                t.setDriver(td);
                trains.add(t);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return trains;
    }

    public int removeTrain(Train train) {
        int count = 0;
        try {
            removeTrainStmt.setLong(1, train.getId());
            count = removeTrainStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    public Train getTrainWithOwner(Train train) {

        Train t = new Train();
        try {

            getTrainWithOwnerStmt.setLong(1, train.getId());
            ResultSet rs = getTrainWithOwnerStmt.executeQuery();

            while (rs.next()) {

                TDriver td = new TDriver();

                td.setId(rs.getInt("td_id"));
                td.setFirstName(rs.getString("name"));
                td.setStartWork(rs.getInt("start_work"));

                t.setId(rs.getInt("t_id"));
                t.setNumber(rs.getString("number"));
                t.setYop(rs.getInt("yop"));

                t.setDriver(td);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return t;
    }

    public int changeTrain(Train train, TDriver tdriver) {
		if(!tdriver.hasId() && !train.hasId())
			return -1;
        int count = 0;
        try {

            changeTrainStmt.setLong(1, tdriver.getId());
            changeTrainStmt.setLong(2, train.getId());


            count = changeTrainStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    public Train getTrain(int id) {
        Train t = new Train();
        TDriverManager tdm = new TDriverManager();
        try {
            getTrainByIdStmt.setInt(1, id);
            ResultSet rs = getTrainByIdStmt.executeQuery();

            while (rs.next()) {
                TDriver td = tdm.getTDriver(rs.getInt("driver_id"));

                t.setId(rs.getInt("t_id"));
                t.setNumber(rs.getString("number"));
                t.setYop(rs.getInt("yop"));
                t.setDriver(td);
                break;
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return t;
    }
}
