package com.example.restservicedemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.example.restservicedemo.domain.Train;
import com.example.restservicedemo.domain.TDriver;

public class TDriverManager {

	private Connection connection;

	private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
	private static final String CREATE_TABLE_TDRIVER = "CREATE TABLE TDriver(td_id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY(start with 1), name varchar(20), start_work integer)";

	private PreparedStatement addTDriverStmt;
	private PreparedStatement removeTDriverStmt;

	private PreparedStatement deleteAllTDriversStmt;
	private PreparedStatement getAllTDriversStmt;
	private PreparedStatement getTDriverByFirstNameStmt;
	private PreparedStatement getTDriverByIdStmt;
	private PreparedStatement dropTable;

	private PreparedStatement getAllTDriversWithTrainsStmt;


	private Statement statement;

	public TDriverManager() {
		try {
			connection = DriverManager.getConnection(URL);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("TDriver".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_TDRIVER);


			addTDriverStmt = connection.prepareStatement(
					"INSERT INTO TDriver (name, start_work) VALUES (?, ?)");
			removeTDriverStmt = connection.prepareStatement(
					"DELETE FROM TDriver where td_id = ?");
			deleteAllTDriversStmt = connection.prepareStatement(
					"DELETE FROM TDriver");
			getAllTDriversStmt = connection.prepareStatement(
					"SELECT td_id, name, start_work FROM TDriver");
			getTDriverByFirstNameStmt = connection.prepareStatement(
					"SELECT td_id, name, start_work FROM TDriver where name = ?");			
			getTDriverByIdStmt = connection.prepareStatement(
					"SELECT td_id, name, start_work FROM TDriver where td_id = ?");
			getAllTDriversWithTrainsStmt = connection.prepareStatement(
					"SELECT td_id, name, start_work, t_id, number, yop, driver_id FROM TDriver JOIN Train ON driver_id = td_id");
			dropTable = connection.prepareCall(
					"DROP TABLE TDriver"
			);

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}

	public void clearTDrivers() {
		try {
			deleteAllTDriversStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addTDriver(TDriver person) {
		int count = 0;
		try {
			addTDriverStmt.setString(1, person.getFirstName());
			addTDriverStmt.setInt(2, person.getStartWork());

			count = addTDriverStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public void dropTable() throws SQLException {
		try {
			connection = DriverManager.getConnection(URL);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;

			rs = connection.getMetaData().getTables(null, null, null, null);
			tableExists = false;
			while (rs.next()) {
				if ("TDriver".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}
			if (tableExists)
				dropTable.executeQuery();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int removeTDriver(long id) {
		int count = 0;
		try {
			removeTDriverStmt.setLong(1, id);

			count = removeTDriverStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<TDriver> getAllTDrivers() {
		List<TDriver> tdrivers = new ArrayList<TDriver>();

		try {
			ResultSet rs = getAllTDriversStmt.executeQuery();

			while (rs.next()) {
				TDriver td = new TDriver();
				td.setId(rs.getInt("td_id"));
				td.setFirstName(rs.getString("name"));
				td.setStartWork(rs.getInt("start_work"));
				tdrivers.add(td);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return tdrivers;
	}
	public TDriver getTDriverFromFirstName(String name) {
		TDriver td = new TDriver();
		try {
			getTDriverByFirstNameStmt.setString(1, name);
			ResultSet rs = getTDriverByFirstNameStmt.executeQuery();

			while (rs.next()) {
				td.setId(rs.getInt("td_id"));
				td.setFirstName(rs.getString("name"));
				td.setStartWork(rs.getInt("start_work"));
				break;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return td;
	}
	public TDriver getTDriver(int id) {
		TDriver td = new TDriver();
		try {
			getTDriverByIdStmt.setInt(1, id);
			ResultSet rs = getTDriverByIdStmt.executeQuery();

			while (rs.next()) {
				td.setId(rs.getInt("td_id"));
				td.setFirstName(rs.getString("name"));
				td.setStartWork(rs.getInt("start_work"));
				break;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return td;
	}

	public Map<TDriver, List<Train>> getTDriverWithTrain() {

		List<Train> trains = new ArrayList<Train>();

		Map<TDriver, List<Train>> result = new HashMap<>();

		try {
			ResultSet rs = getAllTDriversWithTrainsStmt.executeQuery();

			while (rs.next()) {

				TDriver td = new TDriver();

				td.setId(rs.getInt("td_id"));
				td.setFirstName(rs.getString("name"));
				td.setStartWork(rs.getInt("start_work"));

				Train t = new Train();
				t.setId(rs.getInt("t_id"));
				t.setNumber(rs.getString("number"));
				t.setYop(rs.getInt("yop"));

				t.setDriver(td);

				if (result.containsKey(td)) {
					trains = result.get(td);
					trains.add(t);
				} else {
					trains = new ArrayList<>();
					trains.add(t);
					result.put(td, trains);
				}

			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}
}